ext.enableJacoco = { Project project, String variant ->
    project.plugins.apply('jacoco')

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
    }
    final capVariant = variant.capitalize()

    StringBuilder folderSb = new StringBuilder(variant.length() + 1)
    for (int i = 0; i < variant.length(); i++) {
        char c = variant.charAt(i)
        if (Character.isUpperCase(c)) {
            folderSb.append('/')
            folderSb.append(Character.toLowerCase(c))
        } else {
            folderSb.append(c)
        }
    }

    project.android.testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    project.jacoco {
        toolVersion = '0.8.2'
    }

    project.android {
        buildTypes {
            debug {
                testCoverageEnabled = false //https://github.com/objectbox/objectbox-java/issues/179
            }
        }
    }

    project.tasks.create(
            name: 'jacocoTestReport',
            type: JacocoReport,
            dependsOn: ["test${capVariant}UnitTest", "create${capVariant}CoverageReport"]
    ) {
        def buildDir = project.buildDir

        def coverageSourceDirs = [
                "src/main/kotlin"
        ]

        def fileFilter = [
                '**/R.class',
                '**/R$*.class',
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Module.*', // Modules for Dagger.
                '**/*Dagger*.*', // Dagger auto-generated code.
                '**/*MembersInjector*.*', // Dagger auto-generated code.
                '**/*_Provide*Factory*.*',// Dagger auto-generated code.
                '**/*ObjectBox*.*', // ObjectBox auto-generated code.
                '**/*$Lambda$*.*', // Jacoco can not handle several "$"
                '**/*_Factory.*', //Dagger auto-generated code
                '**/*$*$*.*', // Anonymous classes generated by kotlin
                //add libraries
                'android/**/*.*',
                'com/**/*.*',
                'uk/**/*.*',
                'io/**/*.*',
                'androidTest/**/*.*',
                'test/**/*.*',
                '**/di/**/*.*',
                '**/model/**/*.*',
                '**/mock/**/*.*',
                '**/event/**/*.*',
                '**/**_ViewBinding**',
                '**/*EventType.*',
                '**/di/**',
                '**/**Mocked'
        ]

        def kotlinClasses = fileTree(
                dir: "$buildDir/tmp/kotlin-classes/$variant",
                excludes: fileFilter
        )

        group = "Reporting"
        description = "Generate Jacoco coverage reports for the ${project.name} with the " +
                "$variant variant."
        classDirectories = files([ kotlinClasses ])
        additionalSourceDirs = files(coverageSourceDirs)
        sourceDirectories = files(coverageSourceDirs)
        //executionData = files("${project.buildDir}/jacoco/test${capVariant}UnitTest.exec")

        executionData = fileTree(dir: "${project.buildDir}", includes: [
                "jacoco/test${capVariant}UnitTest.exec",
                "output/code-coverage/connected/*.ec"
        ])
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}